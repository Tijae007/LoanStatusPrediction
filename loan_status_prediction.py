# -*- coding: utf-8 -*-
"""Loan Status Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17cdwxjfAEI0SnkKUVLH4FLKOyCMskBgn

# **Importing Dependencies**
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""# **Data Collection and Processing**"""

#loading dataset to dataframe
loan_dataset = pd.read_csv('/content/Loan Prediction.csv')

loan_dataset.head()

#number of rows and columns
loan_dataset.shape

loan_dataset.describe()

#number of missing values in each column
loan_dataset.isnull().sum()

#dropping missing values
loan_dataset = loan_dataset.dropna()

#number of missing values in each column
loan_dataset.isnull().sum()

#label encoding
loan_dataset.replace({"Loan_Status":{'N':0, 'Y':1}}, inplace=True)

loan_dataset.head()

#Dependent column values
loan_dataset['Dependents'].value_counts()

#replacing the value of 3+ to 4
loan_dataset = loan_dataset.replace(to_replace='3+', value=4)

#Dependent column values
loan_dataset['Dependents'].value_counts()

"""# **Data Visualization**"""

#Education & Loan Status
sns.countplot(x='Education', hue='Loan_Status', data=loan_dataset)

#Marital status and Loan status
sns.countplot(x='Married', hue='Loan_Status', data=loan_dataset)

#convert categorical columns to numerical values
loan_dataset.replace({"Married":{'No':0, 'Yes':1}}, inplace=True)

#convert categorical columns to numerical values
loan_dataset.replace({"Education":{'Not Graduate':0, 'Graduate':1}}, inplace=True)

#convert categorical columns to numerical values
loan_dataset.replace({'Gender':{'Female':0, 'Male':1}, 'Self_Employed':{'No':0, 'Yes':1},'Property_Area':{'Rural':0, 'Semiurban':1,'Urban':2}}, inplace=True)

loan_dataset.head()

#Seperating data and label
X= loan_dataset.drop(columns=['Loan_ID', 'Loan_Status'], axis=1)
Y= loan_dataset['Loan_Status']

print(X)
print(Y)

"""# **Train Test Dataset**"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.1, stratify=Y, random_state=2)

print(X.shape, X_test.shape, X_train.shape)

"""# **Training Model: Support Vector Machine Model**"""

classifier = svm.SVC(kernel='linear')

#training the SVM model
classifier.fit(X_train, Y_train)

"""# **Model Evaluation**"""

#Accuracy Score on training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy score on training data : ', training_data_accuracy)

#Accuracy Score on traitestingning data
X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy score on testing data : ', testing_data_accuracy)

"""# **Making Predictive System**"""

X_new = [X_test.iloc[0]]

prediction = classifier.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The Loan Status is No')
else:
  print('The Loan Status is Yes')

